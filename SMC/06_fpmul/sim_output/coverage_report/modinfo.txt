===============================================================================
Module : tb_fpmul
===============================================================================
SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 80.66  92.66 --      99.32 --      50.00 

Source File(s) : 

/home/Sunny/aiacc/SMC/06_fpmul/vsrc/tb_fpmul.v

Module self-instances :

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME     
 80.66  92.66 --      99.32 --      50.00 tb_fpmul 



-------------------------------------------------------------------------------
Line Coverage for Module : tb_fpmul

             Line No.   Total   Covered  Percent
TOTAL                      368      341    92.66
ROUTINE            23        1        0     0.00
ROUTINE            24        1        0     0.00
ROUTINE            25        1        0     0.00
ROUTINE            26        1        0     0.00
ROUTINE            27        1        0     0.00
ROUTINE            28        1        0     0.00
ROUTINE            29        1        0     0.00
ROUTINE            30        1        0     0.00
ROUTINE            31        1        0     0.00
INITIAL            59        4        4   100.00
INITIAL            65        2        2   100.00
INITIAL            72        2        2   100.00
ROUTINE            81      100      100   100.00
ROUTINE           158      100      100   100.00
INITIAL           234       29       27    93.10
ROUTINE           286       11       11   100.00
ROUTINE           311       11       11   100.00
ROUTINE           336       13       11    84.62
ROUTINE           372       37       34    91.89
ROUTINE           441       37       28    75.68
ROUTINE           498       13       11    84.62

22                      // DPI-C 导入 SoftFloat 函数
23         0/1     ==>  import "DPI-C" function shortint unsigned dpi_f16_mul(input shortint unsigned a, input shortint unsigned b);
24         0/1     ==>  import "DPI-C" function int unsigned dpi_f32_mul(input int unsigned a, input int unsigned b);
25         0/1     ==>  import "DPI-C" function int unsigned dpi_get_inexact_flag();
26         0/1     ==>  import "DPI-C" function int unsigned dpi_get_underflow_flag();
27         0/1     ==>  import "DPI-C" function int unsigned dpi_get_overflow_flag();
28         0/1     ==>  import "DPI-C" function int unsigned dpi_get_infinite_flag();
29         0/1     ==>  import "DPI-C" function int unsigned dpi_get_invalid_flag();
30         0/1     ==>  import "DPI-C" function int unsigned dpi_get_exception_flags();
31         0/1     ==>  import "DPI-C" function void dpi_clear_exception_flags();
32                      
33                      // 文件句柄和计数器
34                      integer sim_log;
35                      integer pass_count, fail_count, test_num;
36                      
37                      // 测试用例数组
38                      reg [15:0] fp16_test_a [0:TEST_COUNT-1];
39                      reg [15:0] fp16_test_b [0:TEST_COUNT-1];
40                      reg [31:0] fp32_test_a [0:TEST_COUNT-1];
41                      reg [31:0] fp32_test_b [0:TEST_COUNT-1];
42                      
43                      // 期望结果
44                      reg [15:0] expected_fp16;
45                      reg [31:0] expected_fp32;
46                      
47                      // 实例化被测模块
48                      fpmul uut (
49                          .inst_valid(inst_valid),
50                          .src_precision(src_precision),
51                          .dst_precision(dst_precision),
52                          .dvr_fpmul_s0(dvr_fpmul_s0),
53                          .dvr_fpmul_s1(dvr_fpmul_s1),
54                          .dr_fpmul_d(dr_fpmul_d)
55                      );
56                      
57                      // 时钟生成
58                      initial begin
59         1/1              clk = 0;
60         3/3              forever #5 clk = ~clk;
61                      end
62                      
63                      // FSDB波形转储
64                      initial begin
65         1/1              $fsdbDumpfile("tb_fpmul.fsdb");
66         1/1              $fsdbDumpvars(0, tb_fpmul);
67                      end
68                      
69                      // 初始化测试用例
70                      initial begin
71                          // FP16测试用例初始化
72         1/1              initialize_fp16_test_cases();
73                          // FP32测试用例初始化  
74         1/1              initialize_fp32_test_cases();
75                      end
76                      
77                      // FP16测试用例初始化任务
78                      task initialize_fp16_test_cases;
79                          begin
80                              // 基本数值测试
81         2/2                  fp16_test_a[0] = 16'h3c00; fp16_test_b[0] = 16'h3c00; // 1.0 * 1.0
82         2/2                  fp16_test_a[1] = 16'h4000; fp16_test_b[1] = 16'h3c00; // 2.0 * 1.0
83         2/2                  fp16_test_a[2] = 16'h3c00; fp16_test_b[2] = 16'h4000; // 1.0 * 2.0
84         2/2                  fp16_test_a[3] = 16'h4000; fp16_test_b[3] = 16'h4000; // 2.0 * 2.0
85         2/2                  fp16_test_a[4] = 16'h3800; fp16_test_b[4] = 16'h3800; // 0.5 * 0.5
86                              
87                              // 负数测试
88         2/2                  fp16_test_a[5] = 16'hbc00; fp16_test_b[5] = 16'h3c00; // -1.0 * 1.0
89         2/2                  fp16_test_a[6] = 16'h3c00; fp16_test_b[6] = 16'hbc00; // 1.0 * -1.0
90         2/2                  fp16_test_a[7] = 16'hbc00; fp16_test_b[7] = 16'hbc00; // -1.0 * -1.0
91         2/2                  fp16_test_a[8] = 16'hc000; fp16_test_b[8] = 16'h4000; // -2.0 * 2.0
92                              
93                              // 零值测试
94         2/2                  fp16_test_a[9] = 16'h0000; fp16_test_b[9] = 16'h3c00;  // +0 * 1.0
95         2/2                  fp16_test_a[10] = 16'h3c00; fp16_test_b[10] = 16'h0000; // 1.0 * +0
96         2/2                  fp16_test_a[11] = 16'h8000; fp16_test_b[11] = 16'h3c00; // -0 * 1.0
97         2/2                  fp16_test_a[12] = 16'h0000; fp16_test_b[12] = 16'h0000; // +0 * +0
98         2/2                  fp16_test_a[13] = 16'h8000; fp16_test_b[13] = 16'h8000; // -0 * -0
99                              
100                             // 无穷大测试
101        2/2                  fp16_test_a[14] = 16'h7c00; fp16_test_b[14] = 16'h3c00; // +Inf * 1.0
102        2/2                  fp16_test_a[15] = 16'h3c00; fp16_test_b[15] = 16'h7c00; // 1.0 * +Inf
103        2/2                  fp16_test_a[16] = 16'hfc00; fp16_test_b[16] = 16'h3c00; // -Inf * 1.0
104        2/2                  fp16_test_a[17] = 16'h7c00; fp16_test_b[17] = 16'h7c00; // +Inf * +Inf
105        2/2                  fp16_test_a[18] = 16'h7c00; fp16_test_b[18] = 16'hfc00; // +Inf * -Inf
106        2/2                  fp16_test_a[19] = 16'h7c00; fp16_test_b[19] = 16'h0000; // +Inf * 0 (NaN)
107                             
108                             // NaN测试
109        2/2                  fp16_test_a[20] = 16'h7c01; fp16_test_b[20] = 16'h3c00; // NaN * 1.0
110        2/2                  fp16_test_a[21] = 16'h3c00; fp16_test_b[21] = 16'h7c01; // 1.0 * NaN
111        2/2                  fp16_test_a[22] = 16'h7c01; fp16_test_b[22] = 16'h7c01; // NaN * NaN
112        2/2                  fp16_test_a[23] = 16'h7fff; fp16_test_b[23] = 16'h3c00; // QNaN * 1.0
113                             
114                             // 非规格化数测试
115        2/2                  fp16_test_a[24] = 16'h0001; fp16_test_b[24] = 16'h3c00; // 最小非规格化数 * 1.0
116        2/2                  fp16_test_a[25] = 16'h03ff; fp16_test_b[25] = 16'h3c00; // 最大非规格化数 * 1.0
117        2/2                  fp16_test_a[26] = 16'h0001; fp16_test_b[26] = 16'h0001; // 非规格化数 * 非规格化数
118        2/2                  fp16_test_a[27] = 16'h8001; fp16_test_b[27] = 16'h0001; // 负非规格化数测试
119                             
120                             // 边界值测试
121        2/2                  fp16_test_a[28] = 16'h7bff; fp16_test_b[28] = 16'h3c00; // 最大规格化数 * 1.0
122        2/2                  fp16_test_a[29] = 16'h0400; fp16_test_b[29] = 16'h3c00; // 最小规格化数 * 1.0
123        2/2                  fp16_test_a[30] = 16'h7bff; fp16_test_b[30] = 16'h7bff; // 最大值相乘（可能溢出）
124        2/2                  fp16_test_a[31] = 16'h0400; fp16_test_b[31] = 16'h0400; // 最小值相乘（可能下溢）
125                             
126                             // 特殊数值测试
127        2/2                  fp16_test_a[32] = 16'h4400; fp16_test_b[32] = 16'h3e00; // 4.0 * 1.5
128        2/2                  fp16_test_a[33] = 16'h4800; fp16_test_b[33] = 16'h3400; // 8.0 * 0.25
129        2/2                  fp16_test_a[34] = 16'h5400; fp16_test_b[34] = 16'h2c00; // 64.0 * 0.0625
130        2/2                  fp16_test_a[35] = 16'h3c01; fp16_test_b[35] = 16'h3c01; // (1+ε) * (1+ε)
131                             
132                             // 舍入测试用例
133        2/2                  fp16_test_a[36] = 16'h3bff; fp16_test_b[36] = 16'h4000; // (1-ε) * 2
134        2/2                  fp16_test_a[37] = 16'h4001; fp16_test_b[37] = 16'h3fff; // 精度边界测试
135        2/2                  fp16_test_a[38] = 16'h7800; fp16_test_b[38] = 16'h0800; // 大数 * 小数
136        2/2                  fp16_test_a[39] = 16'h0800; fp16_test_b[39] = 16'h7800; // 小数 * 大数
137                             
138                             // 指数边界测试
139        2/2                  fp16_test_a[40] = 16'h7800; fp16_test_b[40] = 16'h7800; // 接近溢出
140        2/2                  fp16_test_a[41] = 16'h0200; fp16_test_b[41] = 16'h0200; // 接近下溢
141        2/2                  fp16_test_a[42] = 16'h7a00; fp16_test_b[42] = 16'h0600; // 混合边界
142        2/2                  fp16_test_a[43] = 16'h7000; fp16_test_b[43] = 16'h1000; // 中等指数测试
143                             
144                             // 随机测试用例
145        2/2                  fp16_test_a[44] = 16'h5678; fp16_test_b[44] = 16'h1234; // 随机值1
146        2/2                  fp16_test_a[45] = 16'habcd; fp16_test_b[45] = 16'h4321; // 随机值2
147        2/2                  fp16_test_a[46] = 16'h2468; fp16_test_b[46] = 16'h8642; // 随机值3
148        2/2                  fp16_test_a[47] = 16'h1357; fp16_test_b[47] = 16'h9753; // 随机值4
149        2/2                  fp16_test_a[48] = 16'hefef; fp16_test_b[48] = 16'h1010; // 随机值5
150        2/2                  fp16_test_a[49] = 16'h7777; fp16_test_b[49] = 16'h2222; // 随机值6
151                         end
152                     endtask
153                     
154                     // FP32测试用例初始化任务
155                     task initialize_fp32_test_cases;
156                         begin
157                             // 基本数值测试
158        2/2                  fp32_test_a[0] = 32'h3f800000; fp32_test_b[0] = 32'h3f800000; // 1.0 * 1.0
159        2/2                  fp32_test_a[1] = 32'h40000000; fp32_test_b[1] = 32'h3f800000; // 2.0 * 1.0
160        2/2                  fp32_test_a[2] = 32'h3f800000; fp32_test_b[2] = 32'h40000000; // 1.0 * 2.0
161        2/2                  fp32_test_a[3] = 32'h40000000; fp32_test_b[3] = 32'h40000000; // 2.0 * 2.0
162        2/2                  fp32_test_a[4] = 32'h3f000000; fp32_test_b[4] = 32'h3f000000; // 0.5 * 0.5
163                             
164                             // 负数测试
165        2/2                  fp32_test_a[5] = 32'hbf800000; fp32_test_b[5] = 32'h3f800000; // -1.0 * 1.0
166        2/2                  fp32_test_a[6] = 32'h3f800000; fp32_test_b[6] = 32'hbf800000; // 1.0 * -1.0
167        2/2                  fp32_test_a[7] = 32'hbf800000; fp32_test_b[7] = 32'hbf800000; // -1.0 * -1.0
168        2/2                  fp32_test_a[8] = 32'hc0000000; fp32_test_b[8] = 32'h40000000; // -2.0 * 2.0
169                             
170                             // 零值测试
171        2/2                  fp32_test_a[9] = 32'h00000000; fp32_test_b[9] = 32'h3f800000;  // +0 * 1.0
172        2/2                  fp32_test_a[10] = 32'h3f800000; fp32_test_b[10] = 32'h00000000; // 1.0 * +0
173        2/2                  fp32_test_a[11] = 32'h80000000; fp32_test_b[11] = 32'h3f800000; // -0 * 1.0
174        2/2                  fp32_test_a[12] = 32'h00000000; fp32_test_b[12] = 32'h00000000; // +0 * +0
175        2/2                  fp32_test_a[13] = 32'h80000000; fp32_test_b[13] = 32'h80000000; // -0 * -0
176                             
177                             // 无穷大测试
178        2/2                  fp32_test_a[14] = 32'h7f800000; fp32_test_b[14] = 32'h3f800000; // +Inf * 1.0
179        2/2                  fp32_test_a[15] = 32'h3f800000; fp32_test_b[15] = 32'h7f800000; // 1.0 * +Inf
180        2/2                  fp32_test_a[16] = 32'hff800000; fp32_test_b[16] = 32'h3f800000; // -Inf * 1.0
181        2/2                  fp32_test_a[17] = 32'h7f800000; fp32_test_b[17] = 32'h7f800000; // +Inf * +Inf
182        2/2                  fp32_test_a[18] = 32'h7f800000; fp32_test_b[18] = 32'hff800000; // +Inf * -Inf
183        2/2                  fp32_test_a[19] = 32'h7f800000; fp32_test_b[19] = 32'h00000000; // +Inf * 0 (NaN)
184                             
185                             // NaN测试
186        2/2                  fp32_test_a[20] = 32'h7f800001; fp32_test_b[20] = 32'h3f800000; // NaN * 1.0
187        2/2                  fp32_test_a[21] = 32'h3f800000; fp32_test_b[21] = 32'h7f800001; // 1.0 * NaN
188        2/2                  fp32_test_a[22] = 32'h7f800001; fp32_test_b[22] = 32'h7f800001; // NaN * NaN
189        2/2                  fp32_test_a[23] = 32'h7fffffff; fp32_test_b[23] = 32'h3f800000; // QNaN * 1.0
190                             
191                             // 非规格化数测试
192        2/2                  fp32_test_a[24] = 32'h00000001; fp32_test_b[24] = 32'h3f800000; // 最小非规格化数 * 1.0
193        2/2                  fp32_test_a[25] = 32'h007fffff; fp32_test_b[25] = 32'h3f800000; // 最大非规格化数 * 1.0
194        2/2                  fp32_test_a[26] = 32'h00000001; fp32_test_b[26] = 32'h00000001; // 非规格化数 * 非规格化数
195        2/2                  fp32_test_a[27] = 32'h80000001; fp32_test_b[27] = 32'h00000001; // 负非规格化数测试
196                             
197                             // 边界值测试
198        2/2                  fp32_test_a[28] = 32'h7f7fffff; fp32_test_b[28] = 32'h3f800000; // 最大规格化数 * 1.0
199        2/2                  fp32_test_a[29] = 32'h00800000; fp32_test_b[29] = 32'h3f800000; // 最小规格化数 * 1.0
200        2/2                  fp32_test_a[30] = 32'h7f7fffff; fp32_test_b[30] = 32'h7f7fffff; // 最大值相乘（溢出）
201        2/2                  fp32_test_a[31] = 32'h00800000; fp32_test_b[31] = 32'h00800000; // 最小值相乘（下溢）
202                             
203                             // 特殊数值测试
204        2/2                  fp32_test_a[32] = 32'h40800000; fp32_test_b[32] = 32'h3fc00000; // 4.0 * 1.5
205        2/2                  fp32_test_a[33] = 32'h41000000; fp32_test_b[33] = 32'h3e800000; // 8.0 * 0.25
206        2/2                  fp32_test_a[34] = 32'h42800000; fp32_test_b[34] = 32'h3d800000; // 64.0 * 0.0625
207        2/2                  fp32_test_a[35] = 32'h3f800001; fp32_test_b[35] = 32'h3f800001; // (1+ε) * (1+ε)
208                             
209                             // 舍入测试用例
210        2/2                  fp32_test_a[36] = 32'h3f7fffff; fp32_test_b[36] = 32'h40000000; // (1-ε) * 2
211        2/2                  fp32_test_a[37] = 32'h40000001; fp32_test_b[37] = 32'h3fffffff; // 精度边界测试
212        2/2                  fp32_test_a[38] = 32'h7f000000; fp32_test_b[38] = 32'h01000000; // 大数 * 小数
213        2/2                  fp32_test_a[39] = 32'h01000000; fp32_test_b[39] = 32'h7f000000; // 小数 * 大数
214                             
215                             // 指数边界测试
216        2/2                  fp32_test_a[40] = 32'h7f000000; fp32_test_b[40] = 32'h7f000000; // 接近溢出
217        2/2                  fp32_test_a[41] = 32'h01000000; fp32_test_b[41] = 32'h01000000; // 接近下溢
218        2/2                  fp32_test_a[42] = 32'h7e000000; fp32_test_b[42] = 32'h02000000; // 混合边界
219        2/2                  fp32_test_a[43] = 32'h60000000; fp32_test_b[43] = 32'h20000000; // 中等指数测试
220                             
221                             // 随机测试用例
222        2/2                  fp32_test_a[44] = 32'h56789abc; fp32_test_b[44] = 32'h12345678; // 随机值1
223        2/2                  fp32_test_a[45] = 32'habcdef01; fp32_test_b[45] = 32'h43218765; // 随机值2
224        2/2                  fp32_test_a[46] = 32'h24681357; fp32_test_b[46] = 32'h86420975; // 随机值3
225        2/2                  fp32_test_a[47] = 32'h13579246; fp32_test_b[47] = 32'h97531864; // 随机值4
226        2/2                  fp32_test_a[48] = 32'hefef1010; fp32_test_b[48] = 32'h10101010; // 随机值5
227        2/2                  fp32_test_a[49] = 32'h77777777; fp32_test_b[49] = 32'h22222222; // 随机值6
228                         end
229                     endtask
230                     
231                     // 主测试流程
232                     initial begin
233                         // 打开日志文件
234        1/1              sim_log = $fopen("tb_fpmul.log", "w");
235        1/1              if (sim_log == 0) begin
236        0/1     ==>          $display("错误: 无法打开日志文件");
237        0/1     ==>          $finish;
238                         end
                        MISSING_ELSE
239                         
240        1/1              $fdisplay(sim_log, "FPMUL 测试开始，时间: %t", $time);
241        1/1              $fdisplay(sim_log, "========================================");
242                         
243                         // 初始化计数器
244        1/1              pass_count = 0;
245        1/1              fail_count = 0;
246        1/1              test_num = 0;
247                         
248                         // 初始化信号
249        1/1              inst_valid = 0;
250        1/1              src_precision = 0;
251        1/1              dst_precision = 0;
252        1/1              dvr_fpmul_s0 = 0;
253        1/1              dvr_fpmul_s1 = 0;
254                         
255        2/2              #10;
256                         
257                         // 测试FP16乘法
258        1/1              $fdisplay(sim_log, "\n开始 FP16 乘法测试...");
259        1/1              $fdisplay(sim_log, "----------------------------------------");
260        1/1              test_fp16_multiplication();
261                         
262                         // 测试FP32乘法
263        1/1              $fdisplay(sim_log, "\n开始 FP32 乘法测试...");
264        1/1              $fdisplay(sim_log, "----------------------------------------");
265        1/1              test_fp32_multiplication();
266                         
267                         // 测试指令无效情况
268        1/1              $fdisplay(sim_log, "\n测试指令无效情况...");
269        1/1              $fdisplay(sim_log, "----------------------------------------");
270        1/1              test_invalid_instruction();
271                         
272                         // 输出测试结果统计
273        1/1              print_test_summary();
274                         
275                         // 关闭文件
276        1/1              $fclose(sim_log);
277                         
278        1/1              $display("测试完成！详细结果请查看 tb_fpmul.log");
279        1/1              $finish;
280                     end
281                     
282                     // FP16乘法测试任务
283                     task test_fp16_multiplication;
284                         integer i;
285                         begin
286        1/1                  src_precision = 0;  // 16bit精度
287        1/1                  dst_precision = 0;  // 16bit精度
288        1/1                  inst_valid = 1;
289                             
290        1/1                  for (i = 0; i < TEST_COUNT; i = i + 1) begin
291        1/1                      dvr_fpmul_s0 = {16'h0000, fp16_test_a[i]};
292        1/1                      dvr_fpmul_s1 = {16'h0000, fp16_test_b[i]};
293                                 
294                                 // 获取SoftFloat期望结果
295        1/1                      expected_fp16 = dpi_f16_mul(fp16_test_a[i], fp16_test_b[i]);
296                                 
297        2/2                      #10;
298                                 
299                                 // 检查结果
300        1/1                      check_fp16_result(i, fp16_test_a[i], fp16_test_b[i], dr_fpmul_d[15:0], expected_fp16);
301                                 
302        1/1                      test_num = test_num + 1;
303                             end
304                         end
305                     endtask
306                     
307                     // FP32乘法测试任务
308                     task test_fp32_multiplication;
309                         integer i;
310                         begin
311        1/1                  src_precision = 1;  // 32bit精度
312        1/1                  dst_precision = 1;  // 32bit精度
313        1/1                  inst_valid = 1;
314                             
315        1/1                  for (i = 0; i < TEST_COUNT; i = i + 1) begin
316        1/1                      dvr_fpmul_s0 = fp32_test_a[i];
317        1/1                      dvr_fpmul_s1 = fp32_test_b[i];
318                                 
319                                 // 获取SoftFloat期望结果
320        1/1                      expected_fp32 = dpi_f32_mul(fp32_test_a[i], fp32_test_b[i]);
321                                 
322        2/2                      #10;
323                                 
324                                 // 检查结果
325        1/1                      check_fp32_result(i, fp32_test_a[i], fp32_test_b[i], dr_fpmul_d, expected_fp32);
326                                 
327        1/1                      test_num = test_num + 1;
328                             end
329                         end
330                     endtask
331                     
332                     // 测试指令无效情况
333                     task test_invalid_instruction;
334                         begin
335                             // 设置测试数据
336        1/1                  dvr_fpmul_s0 = 32'h3f800000; // 1.0
337        1/1                  dvr_fpmul_s1 = 32'h40000000; // 2.0
338        1/1                  src_precision = 1;
339        1/1                  dst_precision = 1;
340                             
341                             // 指令无效
342        1/1                  inst_valid = 0;
343        2/2                  #10;
344                             
345        1/1                  if (dr_fpmul_d !== 32'h00000000) begin
346        0/1     ==>              $fdisplay(sim_log, "错误: 指令无效时输出应为0，实际输出: %h", dr_fpmul_d);
347        0/1     ==>              fail_count = fail_count + 1;
348                             end else begin
349        1/1                      $fdisplay(sim_log, "通过: 指令无效测试");
350        1/1                      pass_count = pass_count + 1;
351                             end
352                             
353        1/1                  test_num = test_num + 1;
354                         end
355                     endtask
356                     
357                     // 检查FP16结果
358                     task check_fp16_result;
359                         input integer test_index;
360                         input [15:0] input_a;
361                         input [15:0] input_b;
362                         input [15:0] actual_result;
363                         input [15:0] expected_result;
364                         
365                         reg is_actual_nan, is_expected_nan;
366                         reg match_found, is_inexact;
367                         reg [15:0] expected_plus_one, expected_minus_one;
368                         integer exception_flags;
369                         string flag_info;
370                         begin
371                             // 获取异常标志
372        1/1                  exception_flags = dpi_get_exception_flags();
373        1/1                  is_inexact = (exception_flags & dpi_get_inexact_flag()) != 0;
374                             
375                             // 解析异常标志
376        1/1                  flag_info = "";
377        2/2                  if (exception_flags & dpi_get_inexact_flag()) flag_info = {flag_info, " 不精确"};
                        MISSING_ELSE
378        2/2                  if (exception_flags & dpi_get_underflow_flag()) flag_info = {flag_info, " 下溢"};
                        MISSING_ELSE
379        2/2                  if (exception_flags & dpi_get_overflow_flag()) flag_info = {flag_info, " 上溢"};
                        MISSING_ELSE
380        1/2     ==>          if (exception_flags & dpi_get_infinite_flag()) flag_info = {flag_info, " 无穷大"};
                        MISSING_ELSE
381        2/2                  if (exception_flags & dpi_get_invalid_flag()) flag_info = {flag_info, " 无效"};
                        MISSING_ELSE
382        2/2                  if (flag_info == "") flag_info = " 无异常";
                        MISSING_ELSE
383                             
384                             // 检查NaN情况
385        1/1                  is_actual_nan = (actual_result[14:10] == 5'b11111) && (actual_result[9:0] != 10'b0);
386        1/1                  is_expected_nan = (expected_result[14:10] == 5'b11111) && (expected_result[9:0] != 10'b0);
387                             
388        1/1                  match_found = 0;
389                             
390        1/1                  if (is_expected_nan && is_actual_nan) begin
391        1/1                      match_found = 1;
392        1/1                  end else if (actual_result === expected_result) begin
393        1/1                      match_found = 1;
394        1/1                  end else if (is_inexact) begin
395                                 // 当结果不精确时，允许最低位±1的误差
396        1/1                      expected_plus_one = expected_result + 1;
397        1/1                      expected_minus_one = expected_result - 1;
398        1/1                      if ((actual_result === expected_plus_one) || (actual_result === expected_minus_one)) begin
399        1/1                          match_found = 1;
400                                 end
                   ==>  MISSING_ELSE
401                             end
                   ==>  MISSING_ELSE
402                             
403        1/1                  if (match_found) begin
404        1/1                      if (is_expected_nan && is_actual_nan) begin
405        1/1                          $fdisplay(sim_log, "FP16 测试 %0d: 通过 (NaN) - A=%h, B=%h, 期望=%h, 实际=%h | 异常标志:%s", 
406                                              test_index, input_a, input_b, expected_result, actual_result, flag_info);
407        1/1                      end else if (actual_result === expected_result) begin
408        1/1                          $fdisplay(sim_log, "FP16 测试 %0d: 通过 - A=%h, B=%h, 期望=%h, 实际=%h | 异常标志:%s", 
409                                              test_index, input_a, input_b, expected_result, actual_result, flag_info);
410                                 end else begin
411        1/1                          $fdisplay(sim_log, "FP16 测试 %0d: 通过 (±1 tolerance) - A=%h, B=%h, 期望=%h, 实际=%h | 异常标志:%s", 
412                                              test_index, input_a, input_b, expected_result, actual_result, flag_info);
413                                 end
414        1/1                      pass_count = pass_count + 1;
415                             end else begin
416        0/1     ==>              $fdisplay(sim_log, "FP16 测试 %0d: 失败 - A=%h, B=%h, 期望=%h, 实际=%h | 异常标志:%s", 
417                                          test_index, input_a, input_b, expected_result, actual_result, flag_info);
418        0/1     ==>              fail_count = fail_count + 1;
419                             end
420                             
421                             // 清除异常标志
422        1/1                  dpi_clear_exception_flags();
423                         end
424                     endtask
425                     
426                     // 检查FP32结果
427                     task check_fp32_result;
428                         input integer test_index;
429                         input [31:0] input_a;
430                         input [31:0] input_b;
431                         input [31:0] actual_result;
432                         input [31:0] expected_result;
433                         
434                         reg is_actual_nan, is_expected_nan;
435                         reg match_found, is_inexact;
436                         reg [31:0] expected_plus_one, expected_minus_one;
437                         integer exception_flags;
438                         string flag_info;
439                         begin
440                             // 获取异常标志
441        1/1                  exception_flags = dpi_get_exception_flags();
442        1/1                  is_inexact = (exception_flags & dpi_get_inexact_flag()) != 0;
443                             
444                             // 解析异常标志
445        1/1                  flag_info = "";
446        2/2                  if (exception_flags & dpi_get_inexact_flag()) flag_info = {flag_info, " 不精确"};
                        MISSING_ELSE
447        2/2                  if (exception_flags & dpi_get_underflow_flag()) flag_info = {flag_info, " 下溢"};
                        MISSING_ELSE
448        2/2                  if (exception_flags & dpi_get_overflow_flag()) flag_info = {flag_info, " 上溢"};
                        MISSING_ELSE
449        1/2     ==>          if (exception_flags & dpi_get_infinite_flag()) flag_info = {flag_info, " 无穷大"};
                        MISSING_ELSE
450        2/2                  if (exception_flags & dpi_get_invalid_flag()) flag_info = {flag_info, " 无效"};
                        MISSING_ELSE
451        2/2                  if (flag_info == "") flag_info = " 无异常";
                        MISSING_ELSE
452                             
453                             // 检查NaN情况
454        1/1                  is_actual_nan = (actual_result[30:23] == 8'b11111111) && (actual_result[22:0] != 23'b0);
455        1/1                  is_expected_nan = (expected_result[30:23] == 8'b11111111) && (expected_result[22:0] != 23'b0);
456                             
457        1/1                  match_found = 0;
458                             
459        1/1                  if (is_expected_nan && is_actual_nan) begin
460        1/1                      match_found = 1;
461        1/1                  end else if (actual_result === expected_result) begin
462        1/1                      match_found = 1;
463        0/1     ==>          end else if (is_inexact) begin
464                                 // 当结果不精确时，允许最低位±1的误差
465        0/1     ==>              expected_plus_one = expected_result + 1;
466        0/1     ==>              expected_minus_one = expected_result - 1;
467        0/1     ==>              if ((actual_result === expected_plus_one) || (actual_result === expected_minus_one)) begin
468        0/1     ==>                  match_found = 1;
469                                 end
                   ==>  MISSING_ELSE
470                             end
                   ==>  MISSING_ELSE
471                             
472        1/1                  if (match_found) begin
473        1/1                      if (is_expected_nan && is_actual_nan) begin
474        1/1                          $fdisplay(sim_log, "FP32 测试 %0d: 通过 (NaN) - A=%h, B=%h, 期望=%h, 实际=%h | 异常标志:%s", 
475                                              test_index, input_a, input_b, expected_result, actual_result, flag_info);
476        1/1                      end else if (actual_result === expected_result) begin
477        1/1                          $fdisplay(sim_log, "FP32 测试 %0d: 通过 - A=%h, B=%h, 期望=%h, 实际=%h | 异常标志:%s", 
478                                              test_index, input_a, input_b, expected_result, actual_result, flag_info);
479                                 end else begin
480        0/1     ==>                  $fdisplay(sim_log, "FP32 测试 %0d: 通过 (±1 tolerance) - A=%h, B=%h, 期望=%h, 实际=%h | 异常标志:%s", 
481                                              test_index, input_a, input_b, expected_result, actual_result, flag_info);
482                                 end
483        1/1                      pass_count = pass_count + 1;
484                             end else begin
485        0/1     ==>              $fdisplay(sim_log, "FP32 测试 %0d: 失败 - A=%h, B=%h, 期望=%h, 实际=%h | 异常标志:%s", 
486                                          test_index, input_a, input_b, expected_result, actual_result, flag_info);
487        0/1     ==>              fail_count = fail_count + 1;
488                             end
489                             
490                             // 清除异常标志
491        1/1                  dpi_clear_exception_flags();
492                         end
493                     endtask
494                     
495                     // 打印测试结果统计
496                     task print_test_summary;
497                         begin
498        1/1                  $fdisplay(sim_log, "\n========================================");
499        1/1                  $fdisplay(sim_log, "测试结果统计:");
500        1/1                  $fdisplay(sim_log, "========================================");
501        1/1                  $fdisplay(sim_log, "总测试数: %0d", test_num);
502        1/1                  $fdisplay(sim_log, "通过数: %0d", pass_count);
503        1/1                  $fdisplay(sim_log, "失败数: %0d", fail_count);
504        1/1                  $fdisplay(sim_log, "通过率: %0.2f%%", (pass_count * 100.0) / test_num);
505                             
506        1/1                  if (fail_count == 0) begin
507        1/1                      $fdisplay(sim_log, "\n🎉 所有测试都通过了！");
508        1/1                      $display("✅ 所有测试都通过了！");
509                             end else begin
510        0/1     ==>              $fdisplay(sim_log, "\n❌ 有 %0d 个测试失败，请检查错误日志", fail_count);
511        0/1     ==>              $display("❌ 有 %0d 个测试失败，请检查 tb_fpmul_errors.log", fail_count);
512                             end
513                             
514        1/1                  $fdisplay(sim_log, "测试结束时间: %t", $time);

-------------------------------------------------------------------------------
Toggle Coverage for Module : tb_fpmul
                Total Covered Percent 
Totals          9     7       77.78   
Total Bits      296   294     99.32   
Total Bits 0->1 148   148     100.00  
Total Bits 1->0 148   146     98.65   

                                
Signals          9   7   77.78  
Signal Bits      296 294 99.32  
Signal Bits 0->1 148 148 100.00 
Signal Bits 1->0 148 146 98.65  

Signal Details
                    Toggle Toggle 1->0 Toggle 0->1 
inst_valid          Yes    Yes         Yes         
src_precision       No     No          Yes         
dst_precision       No     No          Yes         
dvr_fpmul_s0[31:0]  Yes    Yes         Yes         
dvr_fpmul_s1[31:0]  Yes    Yes         Yes         
dr_fpmul_d[31:0]    Yes    Yes         Yes         
clk                 Yes    Yes         Yes         
expected_fp16[15:0] Yes    Yes         Yes         
expected_fp32[31:0] Yes    Yes         Yes         


-------------------------------------------------------------------------------
Branch Coverage for Module : tb_fpmul
         Line No. Total Covered Percent 
Branches          2     1       50.00   
IF       235      2     1       50.00   


235            if (sim_log == 0) begin
               -1-  
236                $display("错误: 无法打开日志文件");
                   ==>
237                $finish;
238            end
               MISSING_ELSE
               ==>

Branches:

-1- Status      
1   Not Covered 
0   Covered     


-------------------------------------------------------------------------------
===============================================================================
Module Instance : tb_fpmul
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 80.66  92.66 --      99.32 --      50.00 


Instance's subtree :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 93.27  92.86  94.78  95.37 --      90.10 


Module : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME     
 80.66  92.66 --      99.32 --      50.00 tb_fpmul 


Parent : 

none
----------------


Subtrees :

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME 
 95.15 100.00  94.78  94.92 --      90.91 uut  



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : fp16_multiplier
===============================================================================
SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 92.43 --      93.94  93.77 --      89.58 

Source File(s) : 

/home/Sunny/aiacc/SMC/06_fpmul/vsrc/fpmul.v

Module self-instances :

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME                    
 92.43 --      93.94  93.77 --      89.58 tb_fpmul.uut.u_fp16_mul 



-------------------------------------------------------------------------------
Cond Coverage for Module : fp16_multiplier

               Total   Covered  Percent
Conditions        132      124    93.94
Logical           132      124    93.94
Non-Logical         0        0
Event               0        0

 LINE       68
 EXPRESSION ((exp_a == 5'b0) && (mant_a == 10'b0))
             -------1-------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       69
 EXPRESSION ((exp_b == 5'b0) && (mant_b == 10'b0))
             -------1-------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       70
 EXPRESSION (a_is_zero || b_is_zero)
             ----1----    ----2----

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       72
 EXPRESSION ((exp_a == 5'b11111) && (mant_a == 10'b0))
             ---------1---------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       73
 EXPRESSION ((exp_b == 5'b11111) && (mant_b == 10'b0))
             ---------1---------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       74
 EXPRESSION ((a_is_inf || b_is_inf) && ( ! (a_is_zero || b_is_zero) ))
             -----------1----------    ---------------2--------------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       74
 SUB-EXPRESSION (a_is_inf || b_is_inf)
                 ----1---    ----2---

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       74
 SUB-EXPRESSION ( ! (a_is_zero || b_is_zero) )
                    ------------1-----------

-1- Status
 0  Covered
 1  Covered

 LINE       74
 SUB-EXPRESSION (a_is_zero || b_is_zero)
                 ----1----    ----2----

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       76
 EXPRESSION ((exp_a == 5'b11111) && (mant_a != 10'b0))
             ---------1---------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       77
 EXPRESSION ((exp_b == 5'b11111) && (mant_b != 10'b0))
             ---------1---------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       79
 EXPRESSION ((a_is_inf && b_is_zero) || (b_is_inf && a_is_zero))
             -----------1-----------    -----------2-----------

-1- -2- Status
 0   0  Covered
 0   1  Not Covered
 1   0  Covered

 LINE       79
 SUB-EXPRESSION (a_is_inf && b_is_zero)
                 ----1---    ----2----

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       79
 SUB-EXPRESSION (b_is_inf && a_is_zero)
                 ----1---    ----2----

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Not Covered

 LINE       80
 EXPRESSION (a_is_nan || b_is_nan || inf_times_zero)
             ----1---    ----2---    -------3------

-1- -2- -3- Status
 0   0   0  Covered
 0   0   1  Covered
 0   1   0  Covered
 1   0   0  Covered

 LINE       82
 EXPRESSION ((exp_a == 5'b0) && (mant_a != 10'b0))
             -------1-------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       83
 EXPRESSION ((exp_b == 5'b0) && (mant_b != 10'b0))
             -------1-------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       90
 EXPRESSION (a_is_denorm ? ({1'b0, mant_a}) : ({1'b1, mant_a}))
             -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       91
 EXPRESSION (b_is_denorm ? ({1'b0, mant_b}) : ({1'b1, mant_b}))
             -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       100
 EXPRESSION (a_is_denorm || b_is_denorm)
             -----1-----    -----2-----

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       112
 EXPRESSION 
 Number  Term
      1  (mant_product == 22'b0) ? 22'b0 : (need_denorm_handling ? ((leading_zeros >= 5'h16) ? 22'b0 : ((mant_product << leading_zeros))) : (normalize_shift ? ((mant_product >> 1)) : mant_product)))

-1- Status
 0  Covered
 1  Not Covered

 LINE       112
 SUB-EXPRESSION 
 Number  Term
      1  need_denorm_handling ? ((leading_zeros >= 5'h16) ? 22'b0 : ((mant_product << leading_zeros))) : (normalize_shift ? ((mant_product >> 1)) : mant_product))

-1- Status
 0  Covered
 1  Covered

 LINE       112
 SUB-EXPRESSION ((leading_zeros >= 5'h16) ? 22'b0 : ((mant_product << leading_zeros)))
                 ------------1-----------

-1- Status
 0  Covered
 1  Not Covered

 LINE       112
 SUB-EXPRESSION (normalize_shift ? ((mant_product >> 1)) : mant_product)
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       118
 EXPRESSION ((mant_product == 22'b0) ? 10'b0 : (need_denorm_handling ? shifted_mant[20:11] : (normalize_shift ? mant_product[20:11] : mant_product[19:10])))
             -----------1-----------

-1- Status
 0  Covered
 1  Not Covered

 LINE       118
 SUB-EXPRESSION (need_denorm_handling ? shifted_mant[20:11] : (normalize_shift ? mant_product[20:11] : mant_product[19:10]))
                 ----------1---------

-1- Status
 0  Covered
 1  Covered

 LINE       118
 SUB-EXPRESSION (normalize_shift ? mant_product[20:11] : mant_product[19:10])
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       130
 EXPRESSION (need_denorm_handling ? shifted_mant[10] : (normalize_shift ? mant_product[10] : mant_product[9]))
             ----------1---------

-1- Status
 0  Covered
 1  Covered

 LINE       130
 SUB-EXPRESSION (normalize_shift ? mant_product[10] : mant_product[9])
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       133
 EXPRESSION (need_denorm_handling ? ((|shifted_mant[9:0])) : (normalize_shift ? ((|mant_product[9:0])) : ((|mant_product[8:0]))))
             ----------1---------

-1- Status
 0  Covered
 1  Covered

 LINE       133
 SUB-EXPRESSION (normalize_shift ? ((|mant_product[9:0])) : ((|mant_product[8:0])))
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       137
 EXPRESSION (round_bit && (sticky_bit || base_mant[0]))
             ----1----    --------------2-------------

-1- -2- Status
 0   1  Covered
 1   0  Not Covered
 1   1  Covered

 LINE       137
 SUB-EXPRESSION (sticky_bit || base_mant[0])
                 -----1----    ------2-----

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       140
 EXPRESSION (round_overflow ? rounded_mant[10:1] : rounded_mant[9:0])
             -------1------

-1- Status
 0  Covered
 1  Not Covered

 LINE       144
 EXPRESSION (a_is_denorm ? ((-14)) : (({3'b0, exp_a} - FP16_BIAS)))
             -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       145
 EXPRESSION (b_is_denorm ? ((-14)) : (({3'b0, exp_b} - FP16_BIAS)))
             -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       152
 EXPRESSION 
 Number  Term
      1  need_denorm_handling ? ((mant_product == 22'b0) ? 10'b0 : (((-{{5 {1'b0}}, leading_zeros}) + {9'b0, shifted_mant[21]}))) : (normalize_shift ? 10'b1 : 10'b0))

-1- Status
 0  Covered
 1  Covered

 LINE       152
 SUB-EXPRESSION ((mant_product == 22'b0) ? 10'b0 : (((-{{5 {1'b0}}, leading_zeros}) + {9'b0, shifted_mant[21]})))
                 -----------1-----------

-1- Status
 0  Covered
 1  Not Covered

 LINE       152
 SUB-EXPRESSION (normalize_shift ? 10'b1 : 10'b0)
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       169
 EXPRESSION (result_is_denormal ? ((1 - exp_out_biased)) : 0)
             ---------1--------

-1- Status
 0  Covered
 1  Covered

 LINE       171
 EXPRESSION ((denorm_shift >= 6'h17) ? 23'b0 : ((temp_mant >> denorm_shift)))
             -----------1-----------

-1- Status
 0  Covered
 1  Covered

 LINE       175
 EXPRESSION (result_is_denormal ? denorm_final_mant : final_mant)
             ---------1--------

-1- Status
 0  Covered
 1  Covered

 LINE       178
 EXPRESSION 
 Number  Term
      1  output_is_nan ? ({1'b1, {(FP16_MANT_WIDTH - 1) {1'b0}}}) : (output_is_zero ? ({FP16_MANT_WIDTH {1'b0}}) : (output_is_inf ? ({FP16_MANT_WIDTH {1'b0}}) : (exp_overflow ? ({FP16_MANT_WIDTH {1'b0}}) : ((exp_underflow && ((!result_is_denormal))) ? ({FP16_MANT_WIDTH {1'b0}}) : computed_mant)))))

-1- Status
 0  Covered
 1  Covered

 LINE       178
 SUB-EXPRESSION 
 Number  Term
      1  output_is_zero ? ({FP16_MANT_WIDTH {1'b0}}) : (output_is_inf ? ({FP16_MANT_WIDTH {1'b0}}) : (exp_overflow ? ({FP16_MANT_WIDTH {1'b0}}) : ((exp_underflow && ((!result_is_denormal))) ? ({FP16_MANT_WIDTH {1'b0}}) : computed_mant))))

-1- Status
 0  Covered
 1  Covered

 LINE       178
 SUB-EXPRESSION 
 Number  Term
      1  output_is_inf ? ({FP16_MANT_WIDTH {1'b0}}) : (exp_overflow ? ({FP16_MANT_WIDTH {1'b0}}) : ((exp_underflow && ((!result_is_denormal))) ? ({FP16_MANT_WIDTH {1'b0}}) : computed_mant)))

-1- Status
 0  Covered
 1  Covered

 LINE       178
 SUB-EXPRESSION (exp_overflow ? ({FP16_MANT_WIDTH {1'b0}}) : ((exp_underflow && ((!result_is_denormal))) ? ({FP16_MANT_WIDTH {1'b0}}) : computed_mant))
                 ------1-----

-1- Status
 0  Covered
 1  Covered

 LINE       178
 SUB-EXPRESSION ((exp_underflow && ((!result_is_denormal))) ? ({FP16_MANT_WIDTH {1'b0}}) : computed_mant)
                 ---------------------1--------------------

-1- Status
 0  Covered
 1  Covered

 LINE       178
 SUB-EXPRESSION (exp_underflow && ((!result_is_denormal)))
                 ------1------    -----------2-----------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       187
 EXPRESSION 
 Number  Term
      1  output_is_nan ? 5'd31 : (output_is_zero ? 5'b0 : (output_is_inf ? 5'd31 : (exp_overflow ? 5'd31 : ((exp_underflow && ((!result_is_denormal))) ? 5'b0 : (result_is_denormal ? 5'b0 : exp_out_biased[4:0]))))))

-1- Status
 0  Covered
 1  Covered

 LINE       187
 SUB-EXPRESSION 
 Number  Term
      1  output_is_zero ? 5'b0 : (output_is_inf ? 5'd31 : (exp_overflow ? 5'd31 : ((exp_underflow && ((!result_is_denormal))) ? 5'b0 : (result_is_denormal ? 5'b0 : exp_out_biased[4:0])))))

-1- Status
 0  Covered
 1  Covered

 LINE       187
 SUB-EXPRESSION 
 Number  Term
      1  output_is_inf ? 5'd31 : (exp_overflow ? 5'd31 : ((exp_underflow && ((!result_is_denormal))) ? 5'b0 : (result_is_denormal ? 5'b0 : exp_out_biased[4:0]))))

-1- Status
 0  Covered
 1  Covered

 LINE       187
 SUB-EXPRESSION (exp_overflow ? 5'd31 : ((exp_underflow && ((!result_is_denormal))) ? 5'b0 : (result_is_denormal ? 5'b0 : exp_out_biased[4:0])))
                 ------1-----

-1- Status
 0  Covered
 1  Covered

 LINE       187
 SUB-EXPRESSION ((exp_underflow && ((!result_is_denormal))) ? 5'b0 : (result_is_denormal ? 5'b0 : exp_out_biased[4:0]))
                 ---------------------1--------------------

-1- Status
 0  Covered
 1  Covered

 LINE       187
 SUB-EXPRESSION (exp_underflow && ((!result_is_denormal)))
                 ------1------    -----------2-----------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       187
 SUB-EXPRESSION (result_is_denormal ? 5'b0 : exp_out_biased[4:0])
                 ---------1--------

-1- Status
 0  Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Module : fp16_multiplier
                Total Covered Percent 
Totals          51    46      90.20   
Total Bits      674   632     93.77   
Total Bits 0->1 337   316     93.77   
Total Bits 1->0 337   316     93.77   

                            
Ports          3  3  100.00 
Port Bits      96 96 100.00 
Port Bits 0->1 48 48 100.00 
Port Bits 1->0 48 48 100.00 

                                
Signals          48  43  89.58  
Signal Bits      578 536 92.73  
Signal Bits 0->1 289 268 92.73  
Signal Bits 1->0 289 268 92.73  

Port Details
             Toggle Toggle 1->0 Toggle 0->1 Direction 
a[15:0]      Yes    Yes         Yes         INPUT     
b[15:0]      Yes    Yes         Yes         INPUT     
result[15:0] Yes    Yes         Yes         OUTPUT    

Signal Details
                         Toggle Toggle 1->0 Toggle 0->1 
sign_a                   Yes    Yes         Yes         
sign_b                   Yes    Yes         Yes         
exp_a[4:0]               Yes    Yes         Yes         
exp_b[4:0]               Yes    Yes         Yes         
mant_a[9:0]              Yes    Yes         Yes         
mant_b[9:0]              Yes    Yes         Yes         
a_is_zero                Yes    Yes         Yes         
b_is_zero                Yes    Yes         Yes         
output_is_zero           Yes    Yes         Yes         
a_is_inf                 Yes    Yes         Yes         
b_is_inf                 Yes    Yes         Yes         
output_is_inf            Yes    Yes         Yes         
a_is_nan                 Yes    Yes         Yes         
b_is_nan                 Yes    Yes         Yes         
inf_times_zero           Yes    Yes         Yes         
output_is_nan            Yes    Yes         Yes         
a_is_denorm              Yes    Yes         Yes         
b_is_denorm              Yes    Yes         Yes         
sign_out                 Yes    Yes         Yes         
mant_a_with_hidden[10:0] Yes    Yes         Yes         
mant_b_with_hidden[10:0] Yes    Yes         Yes         
mant_product[21:0]       Yes    Yes         Yes         
normalize_shift          Yes    Yes         Yes         
need_denorm_handling     Yes    Yes         Yes         
leading_zeros[4:0]       Yes    Yes         Yes         
shifted_mant[21:0]       Yes    Yes         Yes         
base_mant[9:0]           Yes    Yes         Yes         
round_bit                Yes    Yes         Yes         
sticky_bit               Yes    Yes         Yes         
do_round                 Yes    Yes         Yes         
rounded_mant[9:0]        Yes    Yes         Yes         
rounded_mant[10]         No     No          No          
round_overflow           No     No          No          
final_mant[9:0]          Yes    Yes         Yes         
exp_a_unbiased[7:0]      Yes    Yes         Yes         
exp_b_unbiased[7:0]      Yes    Yes         Yes         
exp_out_unbiased[9:0]    Yes    Yes         Yes         
exp_adjustment[9:0]      Yes    Yes         Yes         
exp_out_biased[9:0]      Yes    Yes         Yes         
exp_overflow             Yes    Yes         Yes         
exp_underflow            Yes    Yes         Yes         
result_is_denormal       Yes    Yes         Yes         
denorm_shift[4:0]        Yes    Yes         Yes         
denorm_shift[5]          No     No          No          
temp_mant[11:0]          No     No          No          
temp_mant[21:12]         Yes    Yes         Yes         
temp_mant[22]            No     No          No          
shifted_denorm[3:0]      No     No          No          
shifted_denorm[4]        Yes    Yes         Yes         
shifted_denorm[5]        No     No          No          
shifted_denorm[22:6]     Yes    Yes         Yes         
denorm_final_mant[9:0]   Yes    Yes         Yes         
computed_mant[9:0]       Yes    Yes         Yes         
mant_out[9:0]            Yes    Yes         Yes         
exp_out[4:0]             Yes    Yes         Yes         


-------------------------------------------------------------------------------
Branch Coverage for Module : fp16_multiplier
         Line No. Total Covered Percent 
Branches          48    43      89.58   
TERNARY  90       2     2       100.00  
TERNARY  91       2     2       100.00  
TERNARY  112      5     3       60.00   
TERNARY  118      4     3       75.00   
TERNARY  130      3     3       100.00  
TERNARY  133      3     3       100.00  
TERNARY  140      2     1       50.00   
TERNARY  144      2     2       100.00  
TERNARY  145      2     2       100.00  
TERNARY  152      4     3       75.00   
TERNARY  169      2     2       100.00  
TERNARY  171      2     2       100.00  
TERNARY  175      2     2       100.00  
TERNARY  178      6     6       100.00  
TERNARY  187      7     7       100.00  


90             wire [FP16_MANT_WIDTH:0] mant_a_with_hidden = a_is_denorm ? {1'b0, mant_a} : {1'b1, mant_a};
                                                                         -1-  
                                                                         ==>  
                                                                         ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


91             wire [FP16_MANT_WIDTH:0] mant_b_with_hidden = b_is_denorm ? {1'b0, mant_b} : {1'b1, mant_b};
                                                                         -1-  
                                                                         ==>  
                                                                         ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


112            wire [21:0] shifted_mant = (mant_product == 0) ? 22'b0 :
                                                              -1-  
                                                              ==>  
113                                       (need_denorm_handling) ? ((leading_zeros >= 22) ? 22'b0 : (mant_product << leading_zeros)) :
                                                                 -2-                      -3-   
                                                                                          ==>  
                                                                                          ==>  
114                                       (normalize_shift) ? (mant_product >> 1) :
                                                            -4-  
                                                            ==>  
                                                            ==>  

Branches:

-1- -2- -3- -4- Status      
1   -   -   -   Not Covered 
0   1   1   -   Not Covered 
0   1   0   -   Covered     
0   0   -   1   Covered     
0   0   -   0   Covered     


118            wire [FP16_MANT_WIDTH-1:0] base_mant = 
                                                      
119                (mant_product == 0) ? 10'b0 :
                                       -1-  
                                       ==>  
120                need_denorm_handling ? 
                                        -2-  
                                        ==>  
121                    shifted_mant[20:11] :     // 取高10位
                                                               
122                normalize_shift ? 
                                   -3-  
                                   ==>  
                                   ==>  

Branches:

-1- -2- -3- Status      
1   -   -   Not Covered 
0   1   -   Covered     
0   0   1   Covered     
0   0   0   Covered     


130            assign round_bit = need_denorm_handling ? shifted_mant[10] :
                                                       -1-  
                                                       ==>  
131                               normalize_shift ? mant_product[10] : mant_product[9];
                                                  -2-  
                                                  ==>  
                                                  ==>  

Branches:

-1- -2- Status  
1   -   Covered 
0   1   Covered 
0   0   Covered 


133            assign sticky_bit = need_denorm_handling ? (|shifted_mant[9:0]) :
                                                        -1-  
                                                        ==>  
134                                normalize_shift ? (|mant_product[9:0]) : (|mant_product[8:0]);
                                                   -2-  
                                                   ==>  
                                                   ==>  

Branches:

-1- -2- Status  
1   -   Covered 
0   1   Covered 
0   0   Covered 


140            wire [9:0] final_mant = round_overflow ? rounded_mant[10:1] : rounded_mant[9:0];
                                                      -1-  
                                                      ==>  
                                                      ==>  

Branches:

-1- Status      
1   Not Covered 
0   Covered     


144            wire signed [7:0] exp_a_unbiased = a_is_denorm ? -14 : {3'b000, exp_a} - FP16_BIAS;
                                                              -1-  
                                                              ==>  
                                                              ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


145            wire signed [7:0] exp_b_unbiased = b_is_denorm ? -14 : {3'b000, exp_b} - FP16_BIAS;
                                                              -1-  
                                                              ==>  
                                                              ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


152            wire signed [9:0] exp_adjustment = 
                                                  
153                need_denorm_handling ? 
                                        -1-  
154                    (mant_product == 0) ? 10'd0 :
                                           -2-  
                                           ==>  
                                           ==>  
155                    -{{5{1'b0}}, leading_zeros} + {9'b0, shifted_mant[21]} :
                                                                               
156                normalize_shift ? 10'd1 : 10'd0;
                                   -3-  
                                   ==>  
                                   ==>  

Branches:

-1- -2- -3- Status      
1   1   -   Not Covered 
1   0   -   Covered     
0   -   1   Covered     
0   -   0   Covered     


169            wire [5:0] denorm_shift = result_is_denormal ? (1 - exp_out_biased) : 0;
                                                            -1-  
                                                            ==>  
                                                            ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


171            wire [22:0] shifted_denorm = (denorm_shift >= 23) ? 23'b0 : (temp_mant >> denorm_shift);
                                                                 -1-  
                                                                 ==>  
                                                                 ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


175            wire [FP16_MANT_WIDTH-1:0] computed_mant = result_is_denormal ? denorm_final_mant : final_mant;
                                                                             -1-  
                                                                             ==>  
                                                                             ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


178            wire [FP16_MANT_WIDTH-1:0] mant_out = 
                                                     
179                output_is_nan    ? {1'b1, {(FP16_MANT_WIDTH-1){1'b0}}} : // NaN (包括inf*0)
                                    -1-  
                                    ==>  
180                output_is_zero   ? {FP16_MANT_WIDTH{1'b0}} :     // 零
                                    -2-  
                                    ==>  
181                output_is_inf    ? {FP16_MANT_WIDTH{1'b0}} :     // 无穷大
                                    -3-  
                                    ==>  
182                exp_overflow     ? {FP16_MANT_WIDTH{1'b0}} :     // 溢出到无穷大
                                    -4-  
                                    ==>  
183                (exp_underflow && !result_is_denormal) ? {FP16_MANT_WIDTH{1'b0}} : // 下溢到零
                                                          -5-  
                                                          ==>  
                                                          ==>  

Branches:

-1- -2- -3- -4- -5- Status  
1   -   -   -   -   Covered 
0   1   -   -   -   Covered 
0   0   1   -   -   Covered 
0   0   0   1   -   Covered 
0   0   0   0   1   Covered 
0   0   0   0   0   Covered 


187            wire [FP16_EXP_WIDTH-1:0] exp_out = 
                                                   
188                output_is_nan    ? 5'd31 :                 // NaN (包括inf*0)
                                    -1-  
                                    ==>  
189                output_is_zero   ? 5'd0 :                  // 零
                                    -2-  
                                    ==>  
190                output_is_inf    ? 5'd31 :                 // 无穷大
                                    -3-  
                                    ==>  
191                exp_overflow     ? 5'd31 :                 // 溢出到无穷大
                                    -4-  
                                    ==>  
192                (exp_underflow && !result_is_denormal) ? 5'd0 : // 下溢到零
                                                          -5-  
                                                          ==>  
193                result_is_denormal ? 5'd0 :               // 非规格化数指数为0
                                      -6-  
                                      ==>  
                                      ==>  

Branches:

-1- -2- -3- -4- -5- -6- Status  
1   -   -   -   -   -   Covered 
0   1   -   -   -   -   Covered 
0   0   1   -   -   -   Covered 
0   0   0   1   -   -   Covered 
0   0   0   0   1   -   Covered 
0   0   0   0   0   1   Covered 
0   0   0   0   0   0   Covered 


-------------------------------------------------------------------------------
===============================================================================
Module Instance : tb_fpmul.uut.u_fp16_mul
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 92.43 --      93.94  93.77 --      89.58 


Instance's subtree :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 94.44 100.00  93.94  94.23 --      89.58 


Module : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME            
 92.43 --      93.94  93.77 --      89.58 fp16_multiplier 


Parent : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME 
 99.86 --     100.00  99.59 --     100.00 uut  


Subtrees :

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME     
100.00 100.00 --     100.00 --     --     lzc_fp16 



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : fp32_multiplier
===============================================================================
SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 93.40 --      95.45  93.09 --      91.67 

Source File(s) : 

/home/Sunny/aiacc/SMC/06_fpmul/vsrc/fpmul.v

Module self-instances :

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME                    
 93.40 --      95.45  93.09 --      91.67 tb_fpmul.uut.u_fp32_mul 



-------------------------------------------------------------------------------
Cond Coverage for Module : fp32_multiplier

               Total   Covered  Percent
Conditions        132      126    95.45
Logical           132      126    95.45
Non-Logical         0        0
Event               0        0

 LINE       222
 EXPRESSION ((exp_a == 8'b0) && (mant_a == 23'b0))
             -------1-------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       223
 EXPRESSION ((exp_b == 8'b0) && (mant_b == 23'b0))
             -------1-------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       224
 EXPRESSION (a_is_zero || b_is_zero)
             ----1----    ----2----

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       226
 EXPRESSION ((exp_a == 8'b11111111) && (mant_a == 23'b0))
             -----------1----------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       227
 EXPRESSION ((exp_b == 8'b11111111) && (mant_b == 23'b0))
             -----------1----------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       228
 EXPRESSION ((a_is_inf || b_is_inf) && ( ! (a_is_zero || b_is_zero) ))
             -----------1----------    ---------------2--------------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       228
 SUB-EXPRESSION (a_is_inf || b_is_inf)
                 ----1---    ----2---

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       228
 SUB-EXPRESSION ( ! (a_is_zero || b_is_zero) )
                    ------------1-----------

-1- Status
 0  Covered
 1  Covered

 LINE       228
 SUB-EXPRESSION (a_is_zero || b_is_zero)
                 ----1----    ----2----

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       230
 EXPRESSION ((exp_a == 8'b11111111) && (mant_a != 23'b0))
             -----------1----------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       231
 EXPRESSION ((exp_b == 8'b11111111) && (mant_b != 23'b0))
             -----------1----------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       233
 EXPRESSION ((a_is_inf && b_is_zero) || (b_is_inf && a_is_zero))
             -----------1-----------    -----------2-----------

-1- -2- Status
 0   0  Covered
 0   1  Not Covered
 1   0  Covered

 LINE       233
 SUB-EXPRESSION (a_is_inf && b_is_zero)
                 ----1---    ----2----

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       233
 SUB-EXPRESSION (b_is_inf && a_is_zero)
                 ----1---    ----2----

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Not Covered

 LINE       234
 EXPRESSION (a_is_nan || b_is_nan || inf_times_zero)
             ----1---    ----2---    -------3------

-1- -2- -3- Status
 0   0   0  Covered
 0   0   1  Covered
 0   1   0  Covered
 1   0   0  Covered

 LINE       236
 EXPRESSION ((exp_a == 8'b0) && (mant_a != 23'b0))
             -------1-------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       237
 EXPRESSION ((exp_b == 8'b0) && (mant_b != 23'b0))
             -------1-------    --------2--------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       244
 EXPRESSION (a_is_denorm ? ({1'b0, mant_a}) : ({1'b1, mant_a}))
             -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       245
 EXPRESSION (b_is_denorm ? ({1'b0, mant_b}) : ({1'b1, mant_b}))
             -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       254
 EXPRESSION (a_is_denorm || b_is_denorm)
             -----1-----    -----2-----

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       266
 EXPRESSION 
 Number  Term
      1  (mant_product == 0) ? 48'b0 : (need_denorm_handling ? ((leading_zeros >= 6'h30) ? 48'b0 : ((mant_product << leading_zeros))) : (normalize_shift ? ((mant_product >> 1)) : mant_product)))

-1- Status
 0  Covered
 1  Not Covered

 LINE       266
 SUB-EXPRESSION 
 Number  Term
      1  need_denorm_handling ? ((leading_zeros >= 6'h30) ? 48'b0 : ((mant_product << leading_zeros))) : (normalize_shift ? ((mant_product >> 1)) : mant_product))

-1- Status
 0  Covered
 1  Covered

 LINE       266
 SUB-EXPRESSION ((leading_zeros >= 6'h30) ? 48'b0 : ((mant_product << leading_zeros)))
                 ------------1-----------

-1- Status
 0  Covered
 1  Not Covered

 LINE       266
 SUB-EXPRESSION (normalize_shift ? ((mant_product >> 1)) : mant_product)
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       272
 EXPRESSION ((mant_product == 0) ? 23'b0 : (need_denorm_handling ? shifted_mant[46:24] : (normalize_shift ? mant_product[46:24] : mant_product[45:23])))
             ---------1---------

-1- Status
 0  Covered
 1  Not Covered

 LINE       272
 SUB-EXPRESSION (need_denorm_handling ? shifted_mant[46:24] : (normalize_shift ? mant_product[46:24] : mant_product[45:23]))
                 ----------1---------

-1- Status
 0  Covered
 1  Covered

 LINE       272
 SUB-EXPRESSION (normalize_shift ? mant_product[46:24] : mant_product[45:23])
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       284
 EXPRESSION (need_denorm_handling ? shifted_mant[23] : (normalize_shift ? mant_product[23] : mant_product[22]))
             ----------1---------

-1- Status
 0  Covered
 1  Covered

 LINE       284
 SUB-EXPRESSION (normalize_shift ? mant_product[23] : mant_product[22])
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       287
 EXPRESSION (need_denorm_handling ? ((|shifted_mant[22:0])) : (normalize_shift ? ((|mant_product[22:0])) : ((|mant_product[21:0]))))
             ----------1---------

-1- Status
 0  Covered
 1  Covered

 LINE       287
 SUB-EXPRESSION (normalize_shift ? ((|mant_product[22:0])) : ((|mant_product[21:0])))
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       291
 EXPRESSION (round_bit && (sticky_bit || base_mant[0]))
             ----1----    --------------2-------------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       291
 SUB-EXPRESSION (sticky_bit || base_mant[0])
                 -----1----    ------2-----

-1- -2- Status
 0   0  Covered
 0   1  Covered
 1   0  Covered

 LINE       294
 EXPRESSION (round_overflow ? rounded_mant[23:1] : rounded_mant[22:0])
             -------1------

-1- Status
 0  Covered
 1  Covered

 LINE       298
 EXPRESSION (a_is_denorm ? ((-126)) : (({2'b0, exp_a} - FP32_BIAS)))
             -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       299
 EXPRESSION (b_is_denorm ? ((-126)) : (({2'b0, exp_b} - FP32_BIAS)))
             -----1-----

-1- Status
 0  Covered
 1  Covered

 LINE       306
 EXPRESSION 
 Number  Term
      1  need_denorm_handling ? ((mant_product == 0) ? 12'b0 : (((-{{6 {1'b0}}, leading_zeros}) + {11'b0, shifted_mant[47]}))) : (normalize_shift ? 12'b1 : 12'b0))

-1- Status
 0  Covered
 1  Covered

 LINE       306
 SUB-EXPRESSION ((mant_product == 0) ? 12'b0 : (((-{{6 {1'b0}}, leading_zeros}) + {11'b0, shifted_mant[47]})))
                 ---------1---------

-1- Status
 0  Covered
 1  Not Covered

 LINE       306
 SUB-EXPRESSION (normalize_shift ? 12'b1 : 12'b0)
                 -------1-------

-1- Status
 0  Covered
 1  Covered

 LINE       323
 EXPRESSION (result_is_denormal ? ((1 - exp_out_biased)) : 0)
             ---------1--------

-1- Status
 0  Covered
 1  Covered

 LINE       325
 EXPRESSION ((denorm_shift >= 8'h2f) ? 47'b0 : ((temp_mant >> denorm_shift)))
             -----------1-----------

-1- Status
 0  Covered
 1  Covered

 LINE       329
 EXPRESSION (result_is_denormal ? denorm_final_mant : final_mant)
             ---------1--------

-1- Status
 0  Covered
 1  Covered

 LINE       332
 EXPRESSION 
 Number  Term
      1  output_is_nan ? ({1'b1, {(FP32_MANT_WIDTH - 1) {1'b0}}}) : (output_is_zero ? ({FP32_MANT_WIDTH {1'b0}}) : (output_is_inf ? ({FP32_MANT_WIDTH {1'b0}}) : (exp_overflow ? ({FP32_MANT_WIDTH {1'b0}}) : ((exp_underflow && ((!result_is_denormal))) ? ({FP32_MANT_WIDTH {1'b0}}) : computed_mant)))))

-1- Status
 0  Covered
 1  Covered

 LINE       332
 SUB-EXPRESSION 
 Number  Term
      1  output_is_zero ? ({FP32_MANT_WIDTH {1'b0}}) : (output_is_inf ? ({FP32_MANT_WIDTH {1'b0}}) : (exp_overflow ? ({FP32_MANT_WIDTH {1'b0}}) : ((exp_underflow && ((!result_is_denormal))) ? ({FP32_MANT_WIDTH {1'b0}}) : computed_mant))))

-1- Status
 0  Covered
 1  Covered

 LINE       332
 SUB-EXPRESSION 
 Number  Term
      1  output_is_inf ? ({FP32_MANT_WIDTH {1'b0}}) : (exp_overflow ? ({FP32_MANT_WIDTH {1'b0}}) : ((exp_underflow && ((!result_is_denormal))) ? ({FP32_MANT_WIDTH {1'b0}}) : computed_mant)))

-1- Status
 0  Covered
 1  Covered

 LINE       332
 SUB-EXPRESSION (exp_overflow ? ({FP32_MANT_WIDTH {1'b0}}) : ((exp_underflow && ((!result_is_denormal))) ? ({FP32_MANT_WIDTH {1'b0}}) : computed_mant))
                 ------1-----

-1- Status
 0  Covered
 1  Covered

 LINE       332
 SUB-EXPRESSION ((exp_underflow && ((!result_is_denormal))) ? ({FP32_MANT_WIDTH {1'b0}}) : computed_mant)
                 ---------------------1--------------------

-1- Status
 0  Covered
 1  Covered

 LINE       332
 SUB-EXPRESSION (exp_underflow && ((!result_is_denormal)))
                 ------1------    -----------2-----------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       341
 EXPRESSION 
 Number  Term
      1  output_is_nan ? 8'd255 : (output_is_zero ? 8'b0 : (output_is_inf ? 8'd255 : (exp_overflow ? 8'd255 : ((exp_underflow && ((!result_is_denormal))) ? 8'b0 : (result_is_denormal ? 8'b0 : exp_out_biased[7:0]))))))

-1- Status
 0  Covered
 1  Covered

 LINE       341
 SUB-EXPRESSION 
 Number  Term
      1  output_is_zero ? 8'b0 : (output_is_inf ? 8'd255 : (exp_overflow ? 8'd255 : ((exp_underflow && ((!result_is_denormal))) ? 8'b0 : (result_is_denormal ? 8'b0 : exp_out_biased[7:0])))))

-1- Status
 0  Covered
 1  Covered

 LINE       341
 SUB-EXPRESSION 
 Number  Term
      1  output_is_inf ? 8'd255 : (exp_overflow ? 8'd255 : ((exp_underflow && ((!result_is_denormal))) ? 8'b0 : (result_is_denormal ? 8'b0 : exp_out_biased[7:0]))))

-1- Status
 0  Covered
 1  Covered

 LINE       341
 SUB-EXPRESSION (exp_overflow ? 8'd255 : ((exp_underflow && ((!result_is_denormal))) ? 8'b0 : (result_is_denormal ? 8'b0 : exp_out_biased[7:0])))
                 ------1-----

-1- Status
 0  Covered
 1  Covered

 LINE       341
 SUB-EXPRESSION ((exp_underflow && ((!result_is_denormal))) ? 8'b0 : (result_is_denormal ? 8'b0 : exp_out_biased[7:0]))
                 ---------------------1--------------------

-1- Status
 0  Covered
 1  Covered

 LINE       341
 SUB-EXPRESSION (exp_underflow && ((!result_is_denormal)))
                 ------1------    -----------2-----------

-1- -2- Status
 0   1  Covered
 1   0  Covered
 1   1  Covered

 LINE       341
 SUB-EXPRESSION (result_is_denormal ? 8'b0 : exp_out_biased[7:0])
                 ---------1--------

-1- Status
 0  Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Module : fp32_multiplier
                Total Covered Percent 
Totals          51    49      96.08   
Total Bits      1274  1186    93.09   
Total Bits 0->1 637   593     93.09   
Total Bits 1->0 637   593     93.09   

                              
Ports          3   3   100.00 
Port Bits      192 192 100.00 
Port Bits 0->1 96  96  100.00 
Port Bits 1->0 96  96  100.00 

                                 
Signals          48   46  95.83  
Signal Bits      1082 994 91.87  
Signal Bits 0->1 541  497 91.87  
Signal Bits 1->0 541  497 91.87  

Port Details
             Toggle Toggle 1->0 Toggle 0->1 Direction 
a[31:0]      Yes    Yes         Yes         INPUT     
b[31:0]      Yes    Yes         Yes         INPUT     
result[31:0] Yes    Yes         Yes         OUTPUT    

Signal Details
                         Toggle Toggle 1->0 Toggle 0->1 
sign_a                   Yes    Yes         Yes         
sign_b                   Yes    Yes         Yes         
exp_a[7:0]               Yes    Yes         Yes         
exp_b[7:0]               Yes    Yes         Yes         
mant_a[22:0]             Yes    Yes         Yes         
mant_b[22:0]             Yes    Yes         Yes         
a_is_zero                Yes    Yes         Yes         
b_is_zero                Yes    Yes         Yes         
output_is_zero           Yes    Yes         Yes         
a_is_inf                 Yes    Yes         Yes         
b_is_inf                 Yes    Yes         Yes         
output_is_inf            Yes    Yes         Yes         
a_is_nan                 Yes    Yes         Yes         
b_is_nan                 Yes    Yes         Yes         
inf_times_zero           Yes    Yes         Yes         
output_is_nan            Yes    Yes         Yes         
a_is_denorm              Yes    Yes         Yes         
b_is_denorm              Yes    Yes         Yes         
sign_out                 Yes    Yes         Yes         
mant_a_with_hidden[23:0] Yes    Yes         Yes         
mant_b_with_hidden[23:0] Yes    Yes         Yes         
mant_product[47:0]       Yes    Yes         Yes         
normalize_shift          Yes    Yes         Yes         
need_denorm_handling     Yes    Yes         Yes         
leading_zeros[5:0]       Yes    Yes         Yes         
shifted_mant[47:0]       Yes    Yes         Yes         
base_mant[22:0]          Yes    Yes         Yes         
round_bit                Yes    Yes         Yes         
sticky_bit               Yes    Yes         Yes         
do_round                 Yes    Yes         Yes         
rounded_mant[23:0]       Yes    Yes         Yes         
round_overflow           Yes    Yes         Yes         
final_mant[22:0]         Yes    Yes         Yes         
exp_a_unbiased[9:0]      Yes    Yes         Yes         
exp_b_unbiased[9:0]      Yes    Yes         Yes         
exp_out_unbiased[11:0]   Yes    Yes         Yes         
exp_adjustment[11:0]     Yes    Yes         Yes         
exp_out_biased[11:0]     Yes    Yes         Yes         
exp_overflow             Yes    Yes         Yes         
exp_underflow            Yes    Yes         Yes         
result_is_denormal       Yes    Yes         Yes         
denorm_shift[7:0]        Yes    Yes         Yes         
temp_mant[22:0]          No     No          No          
temp_mant[45:23]         Yes    Yes         Yes         
temp_mant[46]            No     No          No          
shifted_denorm[1:0]      Yes    Yes         Yes         
shifted_denorm[2]        No     No          No          
shifted_denorm[3]        Yes    Yes         Yes         
shifted_denorm[22:4]     No     No          No          
shifted_denorm[46:23]    Yes    Yes         Yes         
denorm_final_mant[22:0]  Yes    Yes         Yes         
computed_mant[22:0]      Yes    Yes         Yes         
mant_out[22:0]           Yes    Yes         Yes         
exp_out[7:0]             Yes    Yes         Yes         


-------------------------------------------------------------------------------
Branch Coverage for Module : fp32_multiplier
         Line No. Total Covered Percent 
Branches          48    44      91.67   
TERNARY  244      2     2       100.00  
TERNARY  245      2     2       100.00  
TERNARY  266      5     3       60.00   
TERNARY  272      4     3       75.00   
TERNARY  284      3     3       100.00  
TERNARY  287      3     3       100.00  
TERNARY  294      2     2       100.00  
TERNARY  298      2     2       100.00  
TERNARY  299      2     2       100.00  
TERNARY  306      4     3       75.00   
TERNARY  323      2     2       100.00  
TERNARY  325      2     2       100.00  
TERNARY  329      2     2       100.00  
TERNARY  332      6     6       100.00  
TERNARY  341      7     7       100.00  


244            wire [FP32_MANT_WIDTH:0] mant_a_with_hidden = a_is_denorm ? {1'b0, mant_a} : {1'b1, mant_a};
                                                                         -1-  
                                                                         ==>  
                                                                         ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


245            wire [FP32_MANT_WIDTH:0] mant_b_with_hidden = b_is_denorm ? {1'b0, mant_b} : {1'b1, mant_b};
                                                                         -1-  
                                                                         ==>  
                                                                         ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


266            wire [47:0] shifted_mant = (mant_product == 0) ? 48'b0 :
                                                              -1-  
                                                              ==>  
267                                       (need_denorm_handling) ? ((leading_zeros >= 48) ? 48'b0 : (mant_product << leading_zeros)) :
                                                                 -2-                      -3-   
                                                                                          ==>  
                                                                                          ==>  
268                                       (normalize_shift) ? (mant_product >> 1) :
                                                            -4-  
                                                            ==>  
                                                            ==>  

Branches:

-1- -2- -3- -4- Status      
1   -   -   -   Not Covered 
0   1   1   -   Not Covered 
0   1   0   -   Covered     
0   0   -   1   Covered     
0   0   -   0   Covered     


272            wire [FP32_MANT_WIDTH-1:0] base_mant = 
                                                      
273                (mant_product == 0) ? 23'b0 :
                                       -1-  
                                       ==>  
274                need_denorm_handling ? 
                                        -2-  
                                        ==>  
275                    shifted_mant[46:24] :     // 取高23位
                                                               
276                normalize_shift ? 
                                   -3-  
                                   ==>  
                                   ==>  

Branches:

-1- -2- -3- Status      
1   -   -   Not Covered 
0   1   -   Covered     
0   0   1   Covered     
0   0   0   Covered     


284            assign round_bit = need_denorm_handling ? shifted_mant[23] :
                                                       -1-  
                                                       ==>  
285                               normalize_shift ? mant_product[23] : mant_product[22];
                                                  -2-  
                                                  ==>  
                                                  ==>  

Branches:

-1- -2- Status  
1   -   Covered 
0   1   Covered 
0   0   Covered 


287            assign sticky_bit = need_denorm_handling ? (|shifted_mant[22:0]) :
                                                        -1-  
                                                        ==>  
288                                normalize_shift ? (|mant_product[22:0]) : (|mant_product[21:0]);
                                                   -2-  
                                                   ==>  
                                                   ==>  

Branches:

-1- -2- Status  
1   -   Covered 
0   1   Covered 
0   0   Covered 


294            wire [22:0] final_mant = round_overflow ? rounded_mant[23:1] : rounded_mant[22:0];
                                                       -1-  
                                                       ==>  
                                                       ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


298            wire signed [9:0] exp_a_unbiased = a_is_denorm ? -126 : {2'b00, exp_a} - FP32_BIAS;
                                                              -1-  
                                                              ==>  
                                                              ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


299            wire signed [9:0] exp_b_unbiased = b_is_denorm ? -126 : {2'b00, exp_b} - FP32_BIAS;
                                                              -1-  
                                                              ==>  
                                                              ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


306            wire signed [11:0] exp_adjustment = 
                                                   
307                need_denorm_handling ? 
                                        -1-  
308                    (mant_product == 0) ? 12'd0 :
                                           -2-  
                                           ==>  
                                           ==>  
309                    -{{6{1'b0}}, leading_zeros} + {11'b0, shifted_mant[47]} :
                                                                                
310                normalize_shift ? 12'd1 : 12'd0;
                                   -3-  
                                   ==>  
                                   ==>  

Branches:

-1- -2- -3- Status      
1   1   -   Not Covered 
1   0   -   Covered     
0   -   1   Covered     
0   -   0   Covered     


323            wire [7:0] denorm_shift = result_is_denormal ? (1 - exp_out_biased) : 0;
                                                            -1-  
                                                            ==>  
                                                            ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


325            wire [46:0] shifted_denorm = (denorm_shift >= 47) ? 47'b0 : (temp_mant >> denorm_shift);
                                                                 -1-  
                                                                 ==>  
                                                                 ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


329            wire [FP32_MANT_WIDTH-1:0] computed_mant = result_is_denormal ? denorm_final_mant : final_mant;
                                                                             -1-  
                                                                             ==>  
                                                                             ==>  

Branches:

-1- Status  
1   Covered 
0   Covered 


332            wire [FP32_MANT_WIDTH-1:0] mant_out = 
                                                     
333                output_is_nan    ? {1'b1, {(FP32_MANT_WIDTH-1){1'b0}}} : // NaN (包括inf*0)
                                    -1-  
                                    ==>  
334                output_is_zero   ? {FP32_MANT_WIDTH{1'b0}} :     // 零
                                    -2-  
                                    ==>  
335                output_is_inf    ? {FP32_MANT_WIDTH{1'b0}} :     // 无穷大
                                    -3-  
                                    ==>  
336                exp_overflow     ? {FP32_MANT_WIDTH{1'b0}} :     // 溢出到无穷大
                                    -4-  
                                    ==>  
337                (exp_underflow && !result_is_denormal) ? {FP32_MANT_WIDTH{1'b0}} : // 下溢到零
                                                          -5-  
                                                          ==>  
                                                          ==>  

Branches:

-1- -2- -3- -4- -5- Status  
1   -   -   -   -   Covered 
0   1   -   -   -   Covered 
0   0   1   -   -   Covered 
0   0   0   1   -   Covered 
0   0   0   0   1   Covered 
0   0   0   0   0   Covered 


341            wire [FP32_EXP_WIDTH-1:0] exp_out = 
                                                   
342                output_is_nan    ? 8'd255 :                // NaN (包括inf*0)
                                    -1-  
                                    ==>  
343                output_is_zero   ? 8'd0 :                  // 零
                                    -2-  
                                    ==>  
344                output_is_inf    ? 8'd255 :                // 无穷大
                                    -3-  
                                    ==>  
345                exp_overflow     ? 8'd255 :                // 溢出到无穷大
                                    -4-  
                                    ==>  
346                (exp_underflow && !result_is_denormal) ? 8'd0 : // 下溢到零
                                                          -5-  
                                                          ==>  
347                result_is_denormal ? 8'd0 :               // 非规格化数指数为0
                                      -6-  
                                      ==>  
                                      ==>  

Branches:

-1- -2- -3- -4- -5- -6- Status  
1   -   -   -   -   -   Covered 
0   1   -   -   -   -   Covered 
0   0   1   -   -   -   Covered 
0   0   0   1   -   -   Covered 
0   0   0   0   1   -   Covered 
0   0   0   0   0   1   Covered 
0   0   0   0   0   0   Covered 


-------------------------------------------------------------------------------
===============================================================================
Module Instance : tb_fpmul.uut.u_fp32_mul
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 93.40 --      95.45  93.09 --      91.67 


Instance's subtree :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 95.19 100.00  95.45  93.63 --      91.67 


Module : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME            
 93.40 --      95.45  93.09 --      91.67 fp32_multiplier 


Parent : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME 
 99.86 --     100.00  99.59 --     100.00 uut  


Subtrees :

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME     
100.00 100.00 --     100.00 --     --     lzc_fp32 



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : fpmul
===============================================================================
SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 99.86 --     100.00  99.59 --     100.00 

Source File(s) : 

/home/Sunny/aiacc/SMC/06_fpmul/vsrc/fpmul.v

Module self-instances :

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME         
 99.86 --     100.00  99.59 --     100.00 tb_fpmul.uut 



-------------------------------------------------------------------------------
Cond Coverage for Module : fpmul

               Total   Covered  Percent
Conditions          4        4   100.00
Logical             4        4   100.00
Non-Logical         0        0
Event               0        0

 LINE       43
 EXPRESSION (inst_valid ? (src_precision ? fp32_result : ({16'b0, fp16_result})) : 32'b0)
             -----1----

-1- Status
 0  Covered
 1  Covered

 LINE       43
 SUB-EXPRESSION (src_precision ? fp32_result : ({16'b0, fp16_result}))
                 ------1------

-1- Status
 0  Covered
 1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Module : fpmul
                Total Covered Percent 
Totals          12    10      83.33   
Total Bits      486   484     99.59   
Total Bits 0->1 243   243     100.00  
Total Bits 1->0 243   241     99.18   

                              
Ports          6   4   66.67  
Port Bits      198 196 98.99  
Port Bits 0->1 99  99  100.00 
Port Bits 1->0 99  97  97.98  

                                
Signals          6   6   100.00 
Signal Bits      288 288 100.00 
Signal Bits 0->1 144 144 100.00 
Signal Bits 1->0 144 144 100.00 

Port Details
                   Toggle Toggle 1->0 Toggle 0->1 Direction 
inst_valid         Yes    Yes         Yes         INPUT     
src_precision      No     No          Yes         INPUT     
dst_precision      No     No          Yes         INPUT     
dvr_fpmul_s0[31:0] Yes    Yes         Yes         INPUT     
dvr_fpmul_s1[31:0] Yes    Yes         Yes         INPUT     
dr_fpmul_d[31:0]   Yes    Yes         Yes         OUTPUT    

Signal Details
                  Toggle Toggle 1->0 Toggle 0->1 
fp16_a[15:0]      Yes    Yes         Yes         
fp16_b[15:0]      Yes    Yes         Yes         
fp32_a[31:0]      Yes    Yes         Yes         
fp32_b[31:0]      Yes    Yes         Yes         
fp16_result[15:0] Yes    Yes         Yes         
fp32_result[31:0] Yes    Yes         Yes         


-------------------------------------------------------------------------------
Branch Coverage for Module : fpmul
         Line No. Total Covered Percent 
Branches          3     3       100.00  
TERNARY  43       3     3       100.00  


43             assign dr_fpmul_d = inst_valid ? (src_precision ? fp32_result : {16'h0000, fp16_result}) : 32'h00000000;
                                              -1-              -2-   
                                                               ==>  
                                              ==>              ==>   

Branches:

-1- -2- Status  
1   1   Covered 
1   0   Covered 
0   -   Covered 


-------------------------------------------------------------------------------
===============================================================================
Module Instance : tb_fpmul.uut
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 99.86 --     100.00  99.59 --     100.00 


Instance's subtree :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
 95.15 100.00  94.78  94.92 --      90.91 


Module : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME  
 99.86 --     100.00  99.59 --     100.00 fpmul 


Parent : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME     
 80.66  92.66 --      99.32 --      50.00 tb_fpmul 


Subtrees :

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME       
 94.44 100.00  93.94  94.23 --      89.58 u_fp16_mul 
 95.19 100.00  95.45  93.63 --      91.67 u_fp32_mul 



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : leading_zero_counter
===============================================================================
SCORE  LINE   COND   TOGGLE FSM    BRANCH 
100.00 100.00 --     100.00 --     --     

Source File(s) : 

/home/Sunny/aiacc/SMC/06_fpmul/vsrc/lzc.v

Module self-instances :

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME                             
100.00 100.00 --     100.00 --     --     tb_fpmul.uut.u_fp16_mul.lzc_fp16 
100.00 100.00 --     100.00 --     --     tb_fpmul.uut.u_fp32_mul.lzc_fp32 



-------------------------------------------------------------------------------
Line Coverage for Module : leading_zero_counter

             Line No.   Total   Covered  Percent
TOTAL                        5        5   100.00
ALWAYS             17        5        5   100.00

16                          always @(*) begin
17         1/1                  leading_zeros = DATA_WIDTH;  // 默认全零情况
18         1/1                  for (i = DATA_WIDTH-1; i >= 0; i = i - 1) begin
19         1/1                      if (data_in[i]) begin
20         1/1                          leading_zeros = DATA_WIDTH - 1 - i;
21         1/1                          break;
22                                  end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Toggle Coverage for Module : leading_zero_counter ( parameter DATA_WIDTH=22,COUNT_WIDTH=5 ) 
Toggle Coverage for Module self-instances : 
tb_fpmul.uut.u_fp16_mul.lzc_fp16
----------------
SCORE  TOGGLE 
100.00 100.00 

                Total Covered Percent 
Totals          2     2       100.00  
Total Bits      54    54      100.00  
Total Bits 0->1 27    27      100.00  
Total Bits 1->0 27    27      100.00  

                            
Ports          2  2  100.00 
Port Bits      54 54 100.00 
Port Bits 0->1 27 27 100.00 
Port Bits 1->0 27 27 100.00 

Port Details
                   Toggle Toggle 1->0 Toggle 0->1 Direction 
data_in[21:0]      Yes    Yes         Yes         INPUT     
leading_zeros[4:0] Yes    Yes         Yes         OUTPUT    


-------------------------------------------------------------------------------
Toggle Coverage for Module : leading_zero_counter ( parameter DATA_WIDTH=48,COUNT_WIDTH=6 ) 
Toggle Coverage for Module self-instances : 
tb_fpmul.uut.u_fp32_mul.lzc_fp32
----------------
SCORE  TOGGLE 
100.00 100.00 

                Total Covered Percent 
Totals          2     2       100.00  
Total Bits      108   108     100.00  
Total Bits 0->1 54    54      100.00  
Total Bits 1->0 54    54      100.00  

                              
Ports          2   2   100.00 
Port Bits      108 108 100.00 
Port Bits 0->1 54  54  100.00 
Port Bits 1->0 54  54  100.00 

Port Details
                   Toggle Toggle 1->0 Toggle 0->1 Direction 
data_in[47:0]      Yes    Yes         Yes         INPUT     
leading_zeros[5:0] Yes    Yes         Yes         OUTPUT    


-------------------------------------------------------------------------------
===============================================================================
Module Instance : tb_fpmul.uut.u_fp16_mul.lzc_fp16
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
100.00 100.00 --     100.00 --     --     


Instance's subtree :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
100.00 100.00 --     100.00 --     --     


Module : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME                 
100.00 100.00 --     100.00 --     --     leading_zero_counter 


Parent : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME       
 92.43 --      93.94  93.77 --      89.58 u_fp16_mul 


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : tb_fpmul.uut.u_fp16_mul.lzc_fp16

             Line No.   Total   Covered  Percent
TOTAL                        5        5   100.00
ALWAYS             17        5        5   100.00

16                          always @(*) begin
17         1/1                  leading_zeros = DATA_WIDTH;  // 默认全零情况
18         1/1                  for (i = DATA_WIDTH-1; i >= 0; i = i - 1) begin
19         1/1                      if (data_in[i]) begin
20         1/1                          leading_zeros = DATA_WIDTH - 1 - i;
21         1/1                          break;
22                                  end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Toggle Coverage for Instance : tb_fpmul.uut.u_fp16_mul.lzc_fp16
                Total Covered Percent 
Totals          2     2       100.00  
Total Bits      54    54      100.00  
Total Bits 0->1 27    27      100.00  
Total Bits 1->0 27    27      100.00  

                            
Ports          2  2  100.00 
Port Bits      54 54 100.00 
Port Bits 0->1 27 27 100.00 
Port Bits 1->0 27 27 100.00 

Port Details
                   Toggle Toggle 1->0 Toggle 0->1 Direction 
data_in[21:0]      Yes    Yes         Yes         INPUT     
leading_zeros[4:0] Yes    Yes         Yes         OUTPUT    


-------------------------------------------------------------------------------
===============================================================================
Module Instance : tb_fpmul.uut.u_fp32_mul.lzc_fp32
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
100.00 100.00 --     100.00 --     --     


Instance's subtree :

SCORE  LINE   COND   TOGGLE FSM    BRANCH 
100.00 100.00 --     100.00 --     --     


Module : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME                 
100.00 100.00 --     100.00 --     --     leading_zero_counter 


Parent : 

SCORE  LINE   COND   TOGGLE FSM    BRANCH NAME       
 93.40 --      95.45  93.09 --      91.67 u_fp32_mul 


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Line Coverage for Instance : tb_fpmul.uut.u_fp32_mul.lzc_fp32

             Line No.   Total   Covered  Percent
TOTAL                        5        5   100.00
ALWAYS             17        5        5   100.00

16                          always @(*) begin
17         1/1                  leading_zeros = DATA_WIDTH;  // 默认全零情况
18         1/1                  for (i = DATA_WIDTH-1; i >= 0; i = i - 1) begin
19         1/1                      if (data_in[i]) begin
20         1/1                          leading_zeros = DATA_WIDTH - 1 - i;
21         1/1                          break;
22                                  end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Toggle Coverage for Instance : tb_fpmul.uut.u_fp32_mul.lzc_fp32
                Total Covered Percent 
Totals          2     2       100.00  
Total Bits      108   108     100.00  
Total Bits 0->1 54    54      100.00  
Total Bits 1->0 54    54      100.00  

                              
Ports          2   2   100.00 
Port Bits      108 108 100.00 
Port Bits 0->1 54  54  100.00 
Port Bits 1->0 54  54  100.00 

Port Details
                   Toggle Toggle 1->0 Toggle 0->1 Direction 
data_in[47:0]      Yes    Yes         Yes         INPUT     
leading_zeros[5:0] Yes    Yes         Yes         OUTPUT    


